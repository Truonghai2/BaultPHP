<?php

use Core\Application;
use Core\Support\Facade;
use Dotenv\Dotenv;

require_once __DIR__ . '/../vendor/autoload.php';

/*
|--------------------------------------------------------------------------
| Create The Application
|--------------------------------------------------------------------------
|
| The first thing we will do is create a new Bault application instance
| which serves as the "glue" for all the components of Bault, and is
| the IoC container for the system binding all of the various parts.
|
*/

$app = new Application(
    realpath(__DIR__ . '/../'),
);

/*
|--------------------------------------------------------------------------
| Load Environment Variables
|--------------------------------------------------------------------------
|
| Load environment variables from the .env file in the project root.
| This is done once at the beginning of the bootstrap process.
|
*/
$dotenv = Dotenv::createImmutable($app->basePath());
$dotenv->safeLoad();

// Disable shutdown handlers for Revolt and Amphp components to prevent deprecation warnings in Swoole.
putenv('REVOLT_DRIVER_DISABLE_SHUTDOWN_HANDLER=1');
putenv('AMPHP_PROCESS_DISABLE_SHUTDOWN_HANDLER=1');
putenv('AMPHP_HTTP_CLIENT_DISABLE_SHUTDOWN_HANDLER=1');

Facade::setFacadeApplication($app);

$cachedServicesPath = $app->bootstrapPath('cache/services.php');

if (file_exists($cachedServicesPath)) {
    /*
    |--------------------------------------------------------------------------
    | Load Cached Service Providers (Production)
    |--------------------------------------------------------------------------
    |
    | For maximum performance, we can cache the entire list of service
    | providers. This file is generated by the `bootstrap:cache` command.
    |
    */
    $providers = require $cachedServicesPath;
    foreach ($providers as $provider) {
        $app->register($provider);
    }
} else {
    /*
    |--------------------------------------------------------------------------
    | Register Service Providers (Development)
    |--------------------------------------------------------------------------
    |
    | In development, we load providers dynamically. This allows for easier
    | debugging and adding new providers without clearing caches.
    |
    */
    $app->register(\App\Providers\ConfigServiceProvider::class);

    $providers = $app->make('config')->get('app.providers', []);
    foreach ($providers as $provider) {
        $app->register($provider);
    }

    $moduleJsonPaths = glob($app->basePath('Modules/*/module.json'));

    if ($moduleJsonPaths === false) {
        $moduleJsonPaths = [];
    }

    foreach ($moduleJsonPaths as $path) {
        $data = json_decode(file_get_contents($path), true);
        if (!empty($data['name']) && !empty($data['enabled']) && $data['enabled'] === true) {
            foreach ($data['providers'] ?? [] as $providerClass) {
                if (class_exists($providerClass)) {
                    $app->register($providerClass);
                }
            }
        }
    }
}

return $app;
