<?php

namespace Core;

use Core\Support\Facades\Facade;

class AppKernel
{
    protected Application $app;

    public function __construct(Application $app)
    {
        $this->app = $app;

        // Bind the kernel instance itself into the container for commands to use.
        $this->app->instance(AppKernel::class, $this);

        Facade::setFacadeApplication($this->app);

        // Bind Http\Kernel into the container so it can be resolved
        $this->app->singleton(\Core\Contracts\Http\Kernel::class, \Http\Kernel::class);

        // In a production environment, load the cached provider list for performance.
        // This file is generated by the `config:cache` command.
        $cachedProvidersPath = $this->app->getCachedProvidersPath();
        if (file_exists($cachedProvidersPath) && !config('app.debug')) {
            $providers = require $cachedProvidersPath;
        } else {
            // If no cache exists or we are in debug mode, discover providers dynamically.
            $providerRepository = new ProviderRepository($this->app);
            $providers = $providerRepository->getAllProviders();
        }

        foreach ($providers as $provider) {
            $this->app->register($provider);
        }

        $this->app->boot();
    }

    public function getApplication(): Application
    {
        return $this->app;
    }

    /**
     * Get the list of all providers for caching purposes.
     * This is used by the `config:cache` command.
     * @return array
     */
    public function getProvidersForCaching(): array
    {
        $repository = new ProviderRepository($this->app);
        return $repository->getAllProviders();
    }
}
