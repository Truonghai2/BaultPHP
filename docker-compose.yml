services:
  # Service ứng dụng PHP/Swoole
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: bault-php-app:latest
    container_name: bault_app
    restart: unless-stopped
    working_dir: /app
    volumes:
      - .:/app # Giữ nguyên
      - ./storage:/app/storage # Thay đổi ở đây
      - ./bootstrap/cache:/app/bootstrap/cache # Và ở đây
    networks:
      - bault-network
    depends_on:
      db:
        condition: service_healthy 
      redis:
        condition: service_healthy
      meilisearch:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy 
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:9501/ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    environment:
      - DB_HOST=db
      - DB_READ_HOST=db_read 
      - APP_ENV=${APP_ENV:-local}
      - APP_DEBUG=${APP_DEBUG:-true}
      - NGINX_HOST_PORT=88
      - PMA_HOST_PORT=8080
      - VITE_HOST_PORT=5173
      - CENTRIFUGO_HOST_PORT=8000
      - MEILISEARCH_HOST_PORT=7700
      - RABBITMQ_MANAGEMENT_HOST_PORT=15672
      - PROMETHEUS_HOST_PORT=9090
      - GRAFANA_HOST_PORT=3000
      - DB_PORT=3306
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DB_DATABASE=${DB_DATABASE:-bault}
      - MEILISEARCH_HOST=http://meilisearch:7700
      - MEILISEARCH_KEY=${MEILI_MASTER_KEY:-aMasterKey}
      - QUEUE_CONNECTION=rabbitmq
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=${RABBITMQ_USER:-user}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-secret}
      - DB_USERNAME=root
      - DB_PASSWORD=${DB_ROOT_PASSWORD:-secret}
      - CENTRIFUGO_API_URL=http://centrifugo:8000/api
      - CENTRIFUGO_API_KEY=${CENTRIFUGO_API_KEY}
      - VITE_DEV_URL=http://localhost:${NGINX_HOST_PORT:-88}

  # Nginx làm Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: bault_nginx
    restart: unless-stopped
    volumes:
      - .:/app
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./docker/nginx/gzip.conf:/etc/nginx/conf.d/gzip.conf
      - ./docker/nginx/security_headers.conf:/etc/nginx/conf.d/security_headers.conf
    networks:
      - bault-network
    depends_on:
      app:
        condition: service_healthy

  # Service Database (MySQL)
  db:
    image: mysql:8.0
    container_name: bault_db
    restart: unless-stopped
    environment:
      # Biến môi trường cho user replication
      MYSQL_REPLICATION_USER: ${MYSQL_REPLICATION_USER:-replica_user}
      MYSQL_REPLICATION_PASSWORD: ${MYSQL_REPLICATION_PASSWORD:-replica_secret}
      MYSQL_DATABASE: ${DB_DATABASE:-bault}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-secret}
    volumes:
      - bault-db-data:/var/lib/mysql
      # Mount file cấu hình riêng cho primary
      - ./docker/mysql/primary.cnf:/etc/mysql/conf.d/primary.cnf
      # Mount script khởi tạo user replication. Script trong thư mục này sẽ tự động chạy khi DB được tạo lần đầu.
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
      # Mount the custom entrypoint to fix config permissions
      - ./docker/mysql/primary-entrypoint.sh:/usr/local/bin/primary-entrypoint.sh
    networks:
      - bault-network
    healthcheck:
      # Provide credentials for the healthcheck to succeed. Use a default value
      # for the password to match the environment configuration and prevent errors.
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-u", "root", "-p${DB_ROOT_PASSWORD:-secret}"]
      timeout: 20s
      retries: 10
    # Use a custom entrypoint to fix config file permissions before starting MySQL.
    # The default command 'mysqld' is passed to our script, which then calls the original entrypoint.
    entrypoint: ["/usr/local/bin/primary-entrypoint.sh"]
    # Explicitly define the command to be passed to the entrypoint.
    # This makes the configuration more robust and avoids issues where the default CMD from the image might not be passed correctly.
    # Use mysql_native_password for broader compatibility, especially in scripted environments
    # within Docker where caching_sha2_password can sometimes cause issues.
    command: ["mysqld", "--default-authentication-plugin=mysql_native_password"]

  # Service Database Read Replica
  db_read:
    image: mysql:8.0
    container_name: bault_db_read
    restart: unless-stopped
    # Replica depends on the primary. The `service_healthy` condition ensures
    # that this container will only start after the 'db' container's
    # healthcheck has passed, preventing connection errors on startup.
    depends_on:
      db:
        condition: service_healthy
    environment:
      # Các biến này cần thiết cho entrypoint script để kết nối với primary
      MYSQL_REPLICATION_USER: ${MYSQL_REPLICATION_USER:-replica_user}
      MYSQL_REPLICATION_PASSWORD: ${MYSQL_REPLICATION_PASSWORD:-replica_secret}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-secret}
    volumes:
      - bault-db-read-data:/var/lib/mysql
      # Mount file cấu hình riêng cho replica
      - ./docker/mysql/replica.cnf:/etc/mysql/conf.d/replica.cnf
      # Mount entrypoint script tùy chỉnh
      - ./docker/mysql/replica-entrypoint.sh:/usr/local/bin/replica-entrypoint.sh
    networks:
      - bault-network
    # Explicitly define the command. This will be passed as arguments ("$@")
    # to our custom entrypoint script.
    # Use mysql_native_password for broader compatibility.
    command: ["mysqld", "--default-authentication-plugin=mysql_native_password"]
    # Ghi đè entrypoint mặc định để chạy script cấu hình replication
    entrypoint: ["/usr/local/bin/replica-entrypoint.sh"]
    healthcheck:
      # Provide credentials for the healthcheck to succeed. Use a default value
      # for the password to match the environment configuration and prevent errors.
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-u", "root", "-p${DB_ROOT_PASSWORD:-secret}"]
      timeout: 20s
      retries: 10

  # Service Redis
  redis:
    image: redis:7-alpine
    container_name: bault_redis
    restart: unless-stopped
    networks:
      - bault-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  # Service Centrifugo (Real-time messaging server)
  centrifugo:
    image: centrifugo/centrifugo:v5
    container_name: bault_centrifugo
    restart: unless-stopped
    # Gán service này vào một profile để chỉ khởi động khi cần
    profiles:
      - tools
    networks:
      - bault-network
    environment:
      # Sử dụng các biến từ file .env để cấu hình Centrifugo
      - CENTRIFUGO_API_KEY=${CENTRIFUGO_API_KEY}
      - CENTRIFUGO_ADMIN_PASSWORD=${CENTRIFUGO_ADMIN_PASSWORD}
      - CENTRIFUGO_ADMIN_SECRET=${CENTRIFUGO_ADMIN_SECRET}
      - CENTRIFUGO_ALLOWED_ORIGINS=* # Cho phép tất cả các origin trong môi trường dev
      - CENTRIFUGO_LOG_LEVEL=debug

  # Service chạy Vite Dev Server
  vite:
    build:
      context: .
      dockerfile: docker/vite/Dockerfile
    container_name: bault_vite
    command: npm run dev -- --host
    # Gán service này vào một profile để chỉ khởi động khi cần
    # profiles:
    #   - tools
    working_dir: /app
    networks:
      - bault-network

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: bault_phpmyadmin
    restart: unless-stopped
    # Gán service này vào một profile để chỉ khởi động khi cần
    # profiles:
    #   - tools
    networks:
      - bault-network
    environment:
      PMA_HOST: db
      PMA_PORT: 3306
      PMA_USER: root
      PMA_PASSWORD: ${DB_ROOT_PASSWORD:-secret}
    depends_on:
      - db

  # Service Meilisearch (Full-Text Search Engine)
  meilisearch:
    image: getmeili/meilisearch:v1.7
    container_name: bault_meilisearch
    restart: unless-stopped
    environment:
      # Thay đổi MEILI_MASTER_KEY trong file .env cho môi trường production
      - MEILI_MASTER_KEY=${MEILI_MASTER_KEY:-aMasterKey}
      - MEILI_ENV=development
    ports:
      - "${MEILISEARCH_HOST_PORT:-7700}:7700"
    volumes:
      - meili_data:/meili_data
    networks:
      - bault-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7700/health"]
      interval: 1m
      timeout: 1s
      retries: 10

  # Service RabbitMQ (Message Queue)
  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: bault_rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-user}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-secret}
    ports:
      # Port cho giao diện quản lý
      - "${RABBITMQ_MANAGEMENT_HOST_PORT:-15672}:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./docker/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    networks:
      - bault-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Service Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: bault_prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_HOST_PORT:-9090}:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - bault-network

  # Service Grafana (Dashboards)
  grafana:
    image: grafana/grafana:10.4.2
    container_name: bault_grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_HOST_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning/:/etc/grafana/provisioning/
    networks:
      - bault-network
    depends_on:
      - prometheus

networks:
  bault-network:
    driver: bridge

volumes:
  bault-db-data:
    driver: local
  bault-db-read-data:
    driver: local
  meili_data:
    driver: local
  rabbitmq_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
