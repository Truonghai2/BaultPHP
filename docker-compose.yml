services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - APP_ENV=${APP_ENV:-local}
    image: bault-php-app:latest
    container_name: bault_app
    restart: unless-stopped
    ports:
      - "9501:9501"
    volumes:
      # Use a named volume for source code for better performance and to avoid I/O errors.
      - bault-app-src:/app
      # Exclude vendor from the source volume to use the one from the image.
      - /app/vendor
    networks:
      - bault-network
    depends_on:
      redis:
        condition: service_healthy
      meilisearch:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy 
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9501/ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    environment:
      - DB_CONNECTION=${DB_CONNECTION:-mysql}
      - DB_HOST=${DB_HOST:-db}
      - DB_PORT=${DB_PORT:-3306}
      - DB_READ_HOST=${DB_READ_HOST:-db_read}
      - DB_DATABASE=${DB_DATABASE:-bault}
      - DB_PASSWORD=${DB_ROOT_PASSWORD:-secret}
      - DB_USERNAME=${DB_USERNAME:-root}

      - APP_ENV=${APP_ENV:-local}
      - APP_DEBUG=${APP_DEBUG:-true}
      - SWOOLE_ENABLE_COROUTINE=true
      - SWOOLE_WATCH_USE_POLLING=true
      - CHOKIDAR_USEPOLLING=true
      - NGINX_HOST_PORT=888
      - PMA_HOST_PORT=8080
      
      - CENTRIFUGO_HOST_PORT=8000
      - MEILISEARCH_HOST_PORT=7700
      - RABBITMQ_MANAGEMENT_HOST_PORT=15672
      - PROMETHEUS_HOST_PORT=9090
      - GRAFANA_HOST_PORT=3000
      
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      
      - MEILISEARCH_HOST=http://meilisearch:7700
      - MEILISEARCH_KEY=${MEILI_MASTER_KEY:-aMasterKey}
      - QUEUE_CONNECTION=rabbitmq
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=${RABBITMQ_USER:-user}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-secret}
      - DB_SSLMODE=disable
      - CENTRIFUGO_API_URL=http://centrifugo:8000/api
      - CENTRIFUGO_API_KEY=${CENTRIFUGO_API_KEY}
      
  nginx:
    image: nginx:1.25-alpine
    container_name: bault_nginx
    restart: unless-stopped
    # Use the same volume strategy as the app service
    volumes:
      - bault-app-src:/app:ro # Use the app's source volume, read-only
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./docker/nginx/gzip.conf:/etc/nginx/conf.d/gzip.conf
      - ./docker/nginx/security_headers.conf:/etc/nginx/conf.d/security_headers.conf
    networks:
      - bault-network
    ports:
      - "${NGINX_HOST_PORT:-888}:80"
    depends_on:
      app:
        condition: service_healthy

  db:
    image: mysql:8.0
    container_name: bault_db
    restart: unless-stopped
    # profiles:
    #   - tools
    environment:
      MYSQL_REPLICATION_USER: ${MYSQL_REPLICATION_USER:-replica_user}
      MYSQL_REPLICATION_PASSWORD: ${MYSQL_REPLICATION_PASSWORD:-replica_secret}
      MYSQL_DATABASE: ${DB_DATABASE:-bault}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-secret}
    volumes:
      - bault-db-data:/var/lib/mysql
      - ./docker/mysql/primary.cnf:/etc/mysql/conf.d/primary.cnf
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
      - ./docker/mysql/primary-entrypoint.sh:/usr/local/bin/primary-entrypoint.sh
    networks:
      - bault-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-u", "root", "-p${DB_ROOT_PASSWORD:-secret}"]
      timeout: 20s
      retries: 10
    entrypoint: ["/usr/local/bin/primary-entrypoint.sh"]
    command: ["mysqld", "--default-authentication-plugin=mysql_native_password", "--server-id=1", "--gtid_mode=ON", "--enforce-gtid-consistency=ON", "--log-bin=mysql-bin"]

  pgsql:
    image: postgres:15-alpine
    container_name: bault_pgsql
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_DATABASE:-bault}
      POSTGRES_USER: ${DB_USERNAME:-root}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secret}
    # profiles:
    #   - tools
    volumes:
      - ./docker/postgres-data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT_PGSQL:-5432}:5432"
    networks:
      - bault-network

  pgadmin:
    image: dpage/pgadmin4
    container_name: bault_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    # profiles:
    #   - tools
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - bault-network
    depends_on:
      - pgsql

  db_read:
    image: mysql:8.0
    container_name: bault_db_read
    restart: unless-stopped
    # profiles:
    #   - tools
    depends_on:
      db:
        condition: service_healthy
    environment:
      MYSQL_REPLICATION_USER: ${MYSQL_REPLICATION_USER:-replica_user}
      MYSQL_REPLICATION_PASSWORD: ${MYSQL_REPLICATION_PASSWORD:-replica_secret}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-secret}
    volumes:
      - bault-db-read-data:/var/lib/mysql
      - ./docker/mysql/replica.cnf:/etc/mysql/conf.d/replica.cnf
      - ./docker/mysql/replica-entrypoint.sh:/usr/local/bin/replica-entrypoint.sh
    networks:
      - bault-network
    command: ["mysqld", "--default-authentication-plugin=mysql_native_password", "--server-id=2", "--gtid_mode=ON", "--enforce-gtid-consistency=ON", "--read_only=1"]
    entrypoint: ["/usr/local/bin/replica-entrypoint.sh"]
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-u", "root", "-p${DB_ROOT_PASSWORD:-secret}"]
      timeout: 20s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: bault_redis
    restart: unless-stopped
    networks:
      - bault-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  centrifugo:
    image: centrifugo/centrifugo:v5
    container_name: bault_centrifugo
    restart: unless-stopped
    # profiles:
    #   - tools
    networks:
      - bault-network
    environment:
      - CENTRIFUGO_API_KEY=${CENTRIFUGO_API_KEY}
      - CENTRIFUGO_ADMIN_PASSWORD=${CENTRIFUGO_ADMIN_PASSWORD}
      - CENTRIFUGO_ADMIN_SECRET=${CENTRIFUGO_ADMIN_SECRET}
      - CENTRIFUGO_ALLOWED_ORIGINS=*
      - CENTRIFUGO_LOG_LEVEL=debug

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: bault_phpmyadmin
    restart: unless-stopped
    # profiles:
    #   - tools
    ports:
      - "${PMA_HOST_PORT:-8080}:80"
    networks:
      - bault-network
    environment:
      PMA_HOST: db
      PMA_PORT: 3306
      PMA_USER: root
      PMA_PASSWORD: ${DB_ROOT_PASSWORD:-secret}
    depends_on:
      - db

  meilisearch:
    image: getmeili/meilisearch:v1.7
    container_name: bault_meilisearch
    restart: unless-stopped
    environment:
      - MEILI_MASTER_KEY=${MEILI_MASTER_KEY:-aMasterKey}
      - MEILI_ENV=development
    ports:
      - "${MEILISEARCH_HOST_PORT:-7700}:7700"
    volumes:
      - meili_data:/meili_data
    networks:
      - bault-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7700/health"]
      interval: 1m
      timeout: 1s
      retries: 10

  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: bault_rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-user}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-secret}
    ports:
      - "${RABBITMQ_MANAGEMENT_HOST_PORT:-15672}:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./docker/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    networks:
      - bault-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:latest
    container_name: bault_prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_HOST_PORT:-9090}:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml.template:/etc/prometheus/prometheus.yml.template
      - ./docker/prometheus/entrypoint.sh:/entrypoint.sh
      - prometheus_data:/prometheus
    environment:
      - PROMETHEUS_METRICS_TOKEN=${PROMETHEUS_METRICS_TOKEN:-your-very-secret-token}
    entrypoint: /entrypoint.sh
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - bault-network

  grafana:
    image: grafana/grafana:10.4.2
    container_name: bault_grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_HOST_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning/:/etc/grafana/provisioning/
    networks:
      - bault-network
    depends_on:
      - prometheus

networks:
  bault-network:
    driver: bridge

volumes:
  bault-db-data:
    driver: local
  bault-db-read-data:
    driver: local
  meili_data:
    driver: local
  rabbitmq_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin-data:
    driver: local
  bault-storage:
    driver: local
  bault-bootstrap-cache:
    driver: local
  bault-app-src:
    driver: local
