#!/usr/bin/env php
<?php

define('BAULT_START', microtime(true));

/*
|--------------------------------------------------------------------------
| Register The Auto Loader
|--------------------------------------------------------------------------
|
| Composer provides a convenient, automatically generated class loader for
| our application. We just need to utilize it! We'll simply require it
| into the script here so we don't have to worry about manual loading
| of any of our classes. It's just great.
|
*/

require __DIR__.'/vendor/autoload.php';

if (class_exists(\Revolt\EventLoop::class) && method_exists(\Revolt\EventLoop::class, 'disableShutdownHandling')) {
    \Revolt\EventLoop::disableShutdownHandling();
}

/*
|--------------------------------------------------------------------------
| Create The Application
|--------------------------------------------------------------------------
|
| The first thing we will do is create a new Bault application instance
| which serves as the "glue" for all the components of Bault, and is
| the IoC container for the system binding all of the various parts.
|
*/

$app = require_once __DIR__.'/bootstrap/app.php';

/*
|--------------------------------------------------------------------------
| Run The Console Application
|--------------------------------------------------------------------------
|
| This is the entry point for all console commands. We'll instantiate
| the console kernel and call the "handle" method which will run the
| command and return the exit status code.
|
*/
// Resolve the console kernel from the service container. This allows the kernel
// to be swapped or decorated easily through service providers, fully decoupling
// the entry point from the implementation.
$kernel = $app->make(Core\Contracts\Console\Kernel::class);

$status = $kernel->handle(
    $input = new Symfony\Component\Console\Input\ArgvInput(),
    new Symfony\Component\Console\Output\ConsoleOutput()
);

/*
|--------------------------------------------------------------------------
| Terminate The Application
|--------------------------------------------------------------------------
|
| Once the command has finished, we will call the "terminate" method on
| the kernel. This will allow any final work to be done before the
| script ends.
|
*/

if (method_exists($kernel, 'terminate')) {
    $kernel->terminate($input, $status);
}

exit($status);