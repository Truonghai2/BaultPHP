name: Deploy BaultPHP Application

on:
  push:
    branches: [ "main" ]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .env file for testing
        run: |
          echo "APP_ENV=testing" > .env
          echo "APP_DEBUG=true" >> .env
          echo "APP_KEY=base64:someRandomKeyForTestingPurposeOnly=" >> .env
          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=db" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=bault_testing" >> .env
          echo "DB_USERNAME=root" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}" >> .env
          echo "REDIS_HOST=redis" >> .env
          echo "REDIS_PORT=6379" >> .env

      - name: Make entrypoint scripts executable
        run: |
          chmod +x ./docker/mysql/primary-entrypoint.sh
          chmod +x ./docker/mysql/replica-entrypoint.sh
          chmod +x ./docker/php/entrypoint.sh

      - name: Start services
        run: docker compose up --build

      - name: Run database migrations
        run: docker compose exec -T app php cli ddd:migrate --seed

      - name: Run PHPUnit tests
        run: docker compose exec -T app ./vendor/bin/phpunit

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/baultphp-app:latest, ${{ secrets.DOCKERHUB_USERNAME }}/baultphp-app:${{ github.sha }}
          build-args: |
            APP_ENV=production
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Navigate to the application directory on the server.
            cd ${{ secrets.APP_PATH_ON_SERVER }}
            
            # Pull the latest image of the 'app' service from Docker Hub.
            echo ">>> Pulling latest image..."
            docker compose pull app

            # Restart the container with the new image.
            # Docker Compose will automatically perform a rolling update (create a new container before removing the old one).
            # --remove-orphans will clean up containers that are no longer defined (if any).
            echo ">>> Deploying new container..."
            docker compose up -d --remove-orphans app
            
            # [Optional] Clean up old, unused images to save space.
            docker image prune -f