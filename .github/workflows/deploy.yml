name: Deploy BaultPHP Application

on:
  push:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      APP_ENV: testing
      APP_DEBUG: true
      APP_KEY: base64:someRandomKeyForTestingPurposeOnly=
      DB_CONNECTION: mysql
      DB_HOST: db
      DB_PORT: 3306
      DB_DATABASE: bault_testing
      DB_USERNAME: root
      DB_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .env file
        run: |
          echo "APP_ENV=${APP_ENV}" > .env
          echo "APP_DEBUG=${APP_DEBUG}" >> .env
          echo "APP_KEY=${APP_KEY}" >> .env
          echo "DB_CONNECTION=${DB_CONNECTION}" >> .env
          echo "DB_HOST=${DB_HOST}" >> .env
          echo "DB_PORT=${DB_PORT}" >> .env
          echo "DB_DATABASE=${DB_DATABASE}" >> .env
          echo "DB_USERNAME=${DB_USERNAME}" >> .env
          echo "DB_PASSWORD=${DB_PASSWORD}" >> .env
          echo "REDIS_HOST=${REDIS_HOST}" >> .env
          echo "REDIS_PORT=${REDIS_PORT}" >> .env

      - name: Make entrypoint scripts executable
        run: |
          chmod +x ./docker/mysql/primary-entrypoint.sh
          chmod +x ./docker/mysql/replica-entrypoint.sh
          chmod +x ./docker/php/entrypoint.sh

      - name: Start services
        run: docker compose -f docker-compose.yml -f docker-compose.override.yml up -d

      - name: Run database migrations
        run: docker compose exec -T app php cli ddd:migrate --seed

      - name: Run PHPUnit tests
        run: docker compose exec -T app ./vendor/bin/phpunit

      - name: Stop services
        if: always()
        run: docker compose down

      - name: Install Composer
        run: |
          php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
          php composer-setup.php --install-dir=/usr/local/bin --filename=composer
          php -r "unlink('composer-setup.php');"

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-suggest

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Node.js dependencies
        run: npm install
  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/baultphp-app:latest,${{ secrets.DOCKERHUB_USERNAME }}/baultphp-app:${{ github.sha }}
          build-args: |
            APP_ENV=production
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.APP_PATH_ON_SERVER }}
            echo ">>> Pulling latest image..."
            docker compose pull app
            echo ">>> Deploying new container..."
            docker compose up -d --remove-orphans app
            docker image prune -f
